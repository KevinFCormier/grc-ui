/*******************************************************************************
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2017, 2018. All Rights Reserved.
 *
 * Note to U.S. Government Users Restricted Rights:
 * Use, duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 *******************************************************************************/
'use strict'

import React from 'react'
import lodash from 'lodash'
import jsYaml from 'js-yaml'
import YamlParser from '../../lib/client/yaml-helper'
import msgs from '../../nls/platform.properties'


// itemKeys: members of item that get their own chart section
export const dumpAndParse = (item, itemKeys=[]) => {

  const tempItem = lodash.cloneDeep(item)
  // remove the system stuff
  const system = ['creationTimestamp', 'status', 'selfLink', 'uid', 'annotations', 'livenessProbe', 'resourceVersion']
  const removeMeta = (obj) => {
    for (const key in obj) {
      if (system.indexOf(key)!==-1) {
        delete obj[key]
      } else if (typeof obj[key] === 'object') {
        removeMeta(obj[key])
      }
    }
  }
  removeMeta(tempItem)


  // use this to sort the keys generated by safeDump
  const sortKeys = (a,b) => {
    if (a==='name' && b!=='name') {
      return -1
    } else if (a!=='name' && b==='name') {
      return 1
    } else if (a==='namespace' && b!=='namespace') {
      return -1
    } else if (a!=='namespace' && b==='namespace') {
      return 1
    }
    return a.localeCompare(b)
  }

  // dump parsed data into yaml sections
  let yaml, row=0
  let parsed
  const yamls = []
  if (tempItem.raw) {
    yaml = jsYaml.safeDump(tempItem.raw, {sortKeys})
    // create objects from the dumped yaml to create with row #'s
    parsed = new YamlParser().parse(yaml)
    row += yaml.split('\n').length
    yamls.push(yaml)
  }

  // then dump the arrays within parsed
  itemKeys.forEach(key=>{
    const arr = tempItem[key]
    if (Array.isArray(arr)) {
      parsed[key] = []
      arr.forEach(member=>{
        if (member.raw) {
          yaml = jsYaml.safeDump(member.raw, {sortKeys})
          // create objects from the dumped yaml to create with row #'s
          const synced = new YamlParser().parse(yaml, row)
          synced.$r = row
          parsed[key].push(synced)
          row += yaml.split('\n').length
          yamls.push(yaml)
        }
      })
    }
  })
  return {yaml: yamls.join('---\n'), parsed}
}

export const saveLoad = (data) => {
  return jsYaml.safeLoadAll(data)
}

export const getResourceType = (item, locale, key) => {
  return key ? lodash.get(item, key) : item.resourceType
}


export const getClusterLink = (item) => {
  const { cluster: { consoleURL = '', metadata} } = item

  return consoleURL !== '' ?
    <a target='_blank' href={`${consoleURL}/console`}>{metadata.name}</a>
    : metadata.name
}

export function transformPVStatus(item, locale) {
  const translatedStatus = msgs.get(`table.cell.status.${item.status.toLowerCase()}`, locale)
  return translatedStatus ===  `table.cell.status.${item.status.toLowerCase()}`
    ? translatedStatus
    : item.status
}
